@page "/WalletAmount"
@rendermode InteractiveServer
@inject IDbContextFactory<ApplicationDbContext> DbFactory;

<PageTitle>Wallet Cashback Amount</PageTitle>

<h1>Wallet Cashback Amount</h1>

<div class="form-style">
	<form @onsubmit=Submit>
		<input type="number" step="1" min="1" title="wallet id" placeholder="wallet id" @bind="walletID" required/>
		<input type="number" step="1" min="1" title="plan id" placeholder="plan id" @bind="planID" required/>

		<button type="submit">Submit</button>
	</form>
</div>

<div class="table-container">
    <table class="styled-table">
        <thead>
            <tr>
                <th>Cashback</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var cashback in walletAmount)
            {
                <tr>
                    <td>@cashback</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private List<int> walletAmount = new();
    public int? walletID;
    public int? planID;

    private async Task Submit()
    {
        using var context = DbFactory.CreateDbContext();

        var result = await context.Database
            .SqlQuery<int?>(
                $"SELECT dbo.Wallet_Cashback_Amount({walletID}, {planID})"
            )
            .ToListAsync();

        walletAmount = result.Select(amount => amount ?? 0).ToList();

        StateHasChanged();
    }
}
