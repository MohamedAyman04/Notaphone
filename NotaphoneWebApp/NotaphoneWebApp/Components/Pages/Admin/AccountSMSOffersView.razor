@page "/AccountSMSOffersView"
@rendermode InteractiveServer
@inject IDbContextFactory<ApplicationDbContext> DbFactory;

<PageTitle>Account SMS Offers</PageTitle>

<h1>Account SMS Offers</h1>

<div class="form-style">
    <form @onsubmit=Submit>
        <input type="text" maxlength="11" pattern="[0-9]{11}" title="11-digit mobile no" placeholder="mobile no" @bind="mobileNo" required/>

        <button type="submit">Submit</button>
    </form>
</div>

<div class="table-container">
    <table class="styled-table">
        <thead>
            <tr>
                <th>Offer ID</th>
                <th>Benefit ID</th>
                <th>Internet Offered</th>
                <th>SMS Offered</th>
                <th>Minutes Offered</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var tuple in Offers)
            {
                <tr>
                    <td>@tuple.OfferId</td>
                    <td>@tuple.BenefitId</td>
                    <td>@tuple.InternetOffered</td>
                    <td>@tuple.SMSOffered</td>
                    <td>@tuple.MinutesOffered</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@if (loading)
{
    <div class="loader"></div>
}

<p>@error</p>

@if ((Offers == null || Offers.Count == 0) && done)
{
    <p>No Account SMS available</p>
}

@code {
    private List<AccountSMSOffersResult> Offers = new();
    string? mobileNo;
    bool loading = false;
    string error = "";
    bool done = false;

    async void Submit()
    {
        try {
            loading = true;
            await Task.Yield();
            using var context = DbFactory.CreateDbContext();
            Offers = await context.Database
                .SqlQuery<AccountSMSOffersResult>(
                    $"Select * from Account_SMS_Offers({mobileNo})"
                ).ToListAsync();
            done = true;
        } catch (Exception err) {
            error = err.Message;
        }
        finally {
            loading = false;
            StateHasChanged();
        }
	}
}
