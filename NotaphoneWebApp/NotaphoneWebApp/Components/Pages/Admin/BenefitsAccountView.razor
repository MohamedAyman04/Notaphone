@page "/BenefitsAccountView"
@rendermode InteractiveServer
@inject IDbContextFactory<ApplicationDbContext> DbFactory;

<PageTitle>Benefits Account</PageTitle>

<h1>Benefits Account</h1>

<div class="form-style">
	<form @onsubmit=Submit>
		<input type="text" maxlength="11" pattern="[0-9]{11}" title="11-digit mobile no" placeholder="mobile no" @bind="mobileNo" required/>
		<input type="number" step="1" min="1" title="plan id" placeholder="plan id" @bind="planID" required/>

		<button type="submit">Submit</button>
	</form>
</div>

@if (isDone)
{
	<p>@rowsAffected row(s) affcetd</p>
}

@code {
	int? rowsAffected = 0;
	string? mobileNo;
	int? planID;
	bool loading = false;
	private bool isDone = false;
	string error = "";

	async void Submit()
	{

		rowsAffected = 0;
		try {
			loading = true;
			await Task.Yield();
			using var context = DbFactory.CreateDbContext();
			rowsAffected = await context.Database.
				ExecuteSqlAsync(
					$"exec Benefits_Account {mobileNo}, {planID}"
				);
			isDone = true;
		} catch (Exception err) {
			error = err.Message;
		}
		finally {
			loading = false;
			StateHasChanged();
		}
	}
}
