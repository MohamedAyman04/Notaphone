@page "/AccountPlanDateView"
@rendermode InteractiveServer
@inject IDbContextFactory<ApplicationDbContext> DbFactory;

<PageTitle>Account Plan Date</PageTitle>

<h1>Account Plan Date</h1>

<div class="form-style">
    <form @onsubmit=Submit>
        <input type="date" placeholder="date" @bind="inputDate" @bind:format="yyyy-mm-dd" required/>
        <input type="number" step="1" min="1" title="plan id" placeholder="plan id" @bind="planID" required/>

        <button type="submit">Submit</button>
    </form>
</div>

<div class="table-container">
    <table class="styled-table">
        <thead>
            <tr>
                <th>Mobile no.</th>
                <th>Plan ID</th>
                <th>Name</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var tuple in Accounts)
            {
                <tr>
                    <td>@tuple.MobileNo</td>
                    <td>@tuple.PlanId</td>
                    <td>@tuple.Name</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@if (loading)
{
    <div class="loader"></div>
}

<p>@error</p>

@if ((Accounts == null || Accounts.Count == 0) && done)
{
    <p>No Account plan date available</p>
}

@code {
    private List<AccountPlanDateResult> Accounts = new();
    DateTime? inputDate;
    int? planID;
    bool loading = false;
    bool done = false;
    string error = "";

    async void Submit()
    {
        try {
            using var context = DbFactory.CreateDbContext();
            Accounts = await context.Database
                .SqlQuery<AccountPlanDateResult>($"Select * from dbo.Account_Plan_Date({inputDate}, {planID})")
                .ToListAsync();

            loading = false;
            done = true;

            StateHasChanged();
        } catch (Exception err) {
            error = err.Message;
        }
        finally {
            loading = false;
            StateHasChanged();
        }
	}
}
