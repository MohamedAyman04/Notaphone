@page "/AllCustomerAccountsView"
@rendermode InteractiveServer
@inject IDbContextFactory<ApplicationDbContext> DbFactory;

<PageTitle>Customer Accounts</PageTitle>

<h1>All Customer Accounts</h1>

<div class="table-container" style="width: 100%;">
    <table class="styled-table">
        <thead>
            <tr>
                <th>National ID</th>
                <th>First name</th>
                <th>Last name</th>
                <th>Email</th>
                <th>Address</th>
                <th>Date of birth</th>
                <th>Mobile no.</th>
                <th>Account type</th>
                <th>Status</th>
                <th>Start date</th>
                <th>Balance</th>
                <th>Points</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var tuple in CustomerAccounts)
            {
                <tr>
                    <td>@tuple.NationalId</td>
                    <td>@tuple.FirstName</td>
                    <td>@tuple.LastName</td>
                    <td>@tuple.Email</td>
                    <td>@tuple.Address</td>
                    <td>@if (tuple.DateOfBirth != null) DateOnly.FromDateTime(tuple.DateOfBirth.Value);</td>
                    <td>@tuple.MobileNo</td>
                    <td>@tuple.AccountType</td>
                    <td>@tuple.Status</td>
                    <td>@if (tuple.StartDate != null) DateOnly.FromDateTime(tuple.StartDate.Date);</td>
                    <td>@tuple.Balance</td>
                    @if (tuple.Points == null) {
                        <td>0</td>
                    } else {
                        <td>@tuple.Points</td>
                    }
                </tr>
            }
        </tbody>
    </table>
</div>

@if (loading)
{
    <div class="loader"></div>
}

<p>@error</p>

@if ((CustomerAccounts == null || CustomerAccounts.Count == 0) && done)
{
    <p>No accounts available</p>
}

@code {
    private List<AllCustomerAccount> CustomerAccounts = new();
    private bool loading = false;
    private string error = "";
    private bool done = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try {
            loading = true;
            await Task.Yield();
            using var context = DbFactory.CreateDbContext();
            CustomerAccounts = await context.AllCustomerAccounts.ToListAsync();
            done = true;
        } catch (Exception err) {
            error = err.Message;
        }
        finally {
            loading = false;
            StateHasChanged();
        }
    }
}