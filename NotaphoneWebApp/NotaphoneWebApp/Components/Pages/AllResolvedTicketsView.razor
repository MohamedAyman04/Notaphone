@page "/AllResolvedTicketsView"
@rendermode InteractiveServer
@inject IDbContextFactory<ApplicationDbContext> DbFactory;

<PageTitle>All Resolved Tickets</PageTitle>

<h1>All Resolved Tickets</h1>

@if (Tickets == null || Tickets.Count == 0)
{
    <p>No Active Benefits are available</p>
}

<div class="table-container">
    <table class="styled-table">
        <thead>
            <tr>
                <th>Ticket ID</th>
                <th>Mobile no.</th>
                <th>Issue description</th>
                <th>Priority level</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var tuple in Tickets)
            {
                <tr>
                    <td>@tuple.TicketId</td>
                    <td>@tuple.MobileNo</td>
                    <td>@tuple.IssueDescription</td>
                    <td>@tuple.PriorityLevel</td>
                    <td>@tuple.Status</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private List<AllResolvedTicket> Tickets = new();
    bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        loading = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (loading)
        {
            using var context = DbFactory.CreateDbContext();
            Tickets = await context.AllResolvedTickets.ToListAsync();

            loading = false;

            StateHasChanged();
        }
    }
}
