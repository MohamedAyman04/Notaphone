@page "/ExtraAmount"
@rendermode InteractiveServer
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Extra Amount</PageTitle>

<h1>Extra Amount</h1>

<form @onsubmit=Submit>
	<div class="form-style">
		<input type="text" id="mobileno" maxlength="11" pattern="[0-9]{11}" title="11-digit mobile no" placeholder="mobile no" @bind="mobileNo" required/>
		<input type="text" id="planname" maxlength="11" title="plan name" placeholder="plan name" @bind="planName" required />

        <button type="submit">Submit</button>
	</div>
</form>

<div class="table-container">

    <table class="styled-table">
        <thead>
            <tr>
                <th>Extra Amount</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ex in Extra)
            {
                <tr>
                    <td>@ex</td>
                </tr>
            }
        </tbody>
    </table>
</div>



@code {
    private List<int> Extra = new();
    public string mobileNo = "";
    public string planName = "";

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var authState = await authenticationState;
            mobileNo = authState.User.FindFirst(ClaimTypes.MobilePhone).Value;
            StateHasChanged();
        }
    }


    private async Task Submit()
    {
        using var context = DbFactory.CreateDbContext();

        Extra = await context.Database
        .SqlQuery<int>
        (
            $"Select dbo.Extra_plan_amount ({mobileNo}, {planName})"
        )
        .ToListAsync();


        StateHasChanged();
    }
}
