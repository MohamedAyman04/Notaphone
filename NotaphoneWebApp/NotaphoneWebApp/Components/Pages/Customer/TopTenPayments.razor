@page "/TopTenPayments"
@rendermode InteractiveServer
@inject IDbContextFactory<ApplicationDbContext> DbFactory;

<PageTitle>Top Ten Payments</PageTitle>

<h1>Top 10 Successful Payments</h1>

<div class="form-style">
	<form @onsubmit=Submit>
		<input type="text" maxlength="11" pattern="[0-9]{11}" title="11-digit mobile no" placeholder="mobile no" @bind="mobileNo" required/>

		<button type="submit">Submit</button>
	</form>
</div>

<div class="table-container">
    <table class="styled-table">
        <thead>
            <tr>
                <th>Payment ID</th>
                <th>Amount</th>
                <th>Date Of Payment</th>
                <th>Payment Method</th>
                <th>Status</th>
                <th>MobileNo</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var payment in Payments)
            {
                <tr>
                    <td>@payment.PaymentId</td>
                    <td>@payment.Amount</td>
                    <td>@payment.DateOfPayment</td>
                    <td>@payment.PaymentMethod</td>
                    <td>@payment.Status</td>
                    <td>@payment.MobileNo</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@if (loading)
{
    <div class="loader"></div>
}

<p>@error</p>

@if ((Payments == null || Payments.Count == 0) && done)
{
    <p>No plan usage available</p>
}

@code {
    private List<TopSuccessfulPaymentsResult> Payments = new();
    public string mobileNo = "";
    private bool done = false;
    private bool loading = false;
    private string error = "";

    private async Task Submit()
    {
        using var context = DbFactory.CreateDbContext();

        Payments = await context.Database
        .SqlQuery<TopSuccessfulPaymentsResult>
        (
            $"exec Top_Successful_Payments {mobileNo}"
        )
        .ToListAsync();


    StateHasChanged();
    }
}
