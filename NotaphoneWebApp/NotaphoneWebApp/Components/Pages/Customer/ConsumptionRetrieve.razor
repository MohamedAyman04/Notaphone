@page "/ConsumptionRetrieve"
@rendermode InteractiveServer
@inject IDbContextFactory<ApplicationDbContext> DbFactory;

<PageTitle>Consumption Details</PageTitle>

<h1>Consumption Details</h1>

<form @onsubmit=Submit>
	<div class="form-style">
		<div class="together">
			<label for="planname">Plan Name</label>
			<input type="text" id="planname" maxlength="11" title="plan name" placeholder="plan name" @bind="Plan_name" required />
		</div>
		<div class="together">
			<label for="startdate">Start Date</label>
			<input type="date" id="startdate" @bind="startDate" @bind:format="yyyy-MM-dd" required />
		</div>
		<div class="together">
			<label for="enddate">End Date</label>
			<input type="date" id="enddate" @bind="endDate" @bind:format="yyyy-MM-dd" required />
		</div>
		<button type="submit">Submit</button>
	</div>
</form>

<div class="table-container">


	<table class="styled-table">
		<thead>
			<tr>
				<th>SMS Sent</th>
				<th>Minutes Used</th>
				<th>Data Consumption</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var consumption in consumptionResults)
			{
				<tr>
					<td>@consumption.SMSSent</td>
					<td>@consumption.MinutesUsed</td>
					<td>@consumption.DataConsumption</td>
				</tr>
			}
		</tbody>
	</table>
</div>

@if (loading)
{
	<div class="loader"></div>
}

<p>@error</p>

@if ((consumptionResults == null || consumptionResults.Count == 0) && done)
{
	<p>No consumptions available</p>
}

@code {

	private List<ConsumptionResult> consumptionResults = new();
	private bool isLoading = true;
	public string Plan_name = "";
	public DateTime? startDate;
	public DateTime? endDate;
	private bool loading = false;
	private string error = "";
	private bool done = false;

	private async Task Submit()
	{
		try {
			loading = true;

			await Task.Yield();

			using var context = DbFactory.CreateDbContext();
			consumptionResults = await context.Database
				.SqlQuery<ConsumptionResult>(
					$"Select * from dbo.Consumption({Plan_name}, {startDate}, {endDate})"
				).ToListAsync();
			consumptionResults.ForEach(Console.WriteLine); 
			done = true;
		} catch(Exception err) {
			error = err.Message;
		} finally {
			loading = false;
			StateHasChanged();
		}
	}
}