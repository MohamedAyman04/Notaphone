@page "/AllBenefits"
@rendermode InteractiveServer
@inject IDbContextFactory<ApplicationDbContext> DbFactory;

<PageTitle>All Active Benefits Details</PageTitle>

<h1>All Active Benefits Details</h1>

<div class="table-container">
    <table class="styled-table">
        <thead>
            <tr>
                <th>Benefit ID</th>
                <th>Description</th>
                <th>ValidityDate</th>
                <th>Status</th>
                <th>MobileNo</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var benefit in Benefits)
            {
                <tr>
                    <td>@benefit.BenefitId</td>
                    <td>@benefit.Description</td>
                    <td>@if (benefit.ValidityDate != null) DateOnly.FromDateTime(benefit.ValidityDate.Value);</td>
                    <td>@benefit.Status</td>
                    <td>@benefit.MobileNo</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@if (loading)
{
    <div class="loader"></div>
}

<p>@error</p>

@if ((Benefits == null || Benefits.Count == 0) && done)
{
    <p>No Active Benefits are available</p>
}

@code {
    private List<AllBenefit> Benefits = new();
    private bool loading = false;
    private string error = "";
    private bool done = false;

    protected override async Task OnInitializedAsync()
    {
        try {
            loading = true;
            await Task.Yield();
            using var context = DbFactory.CreateDbContext();
            Benefits = await context.AllBenefits.ToListAsync();
            done = true;
        } catch (Exception err) {
            error = err.Message;    
        } finally {
            loading = false;
            StateHasChanged();
        }
    }
}
