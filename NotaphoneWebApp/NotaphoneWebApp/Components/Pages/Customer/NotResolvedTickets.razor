@page "/NotResolvedTickets"
@rendermode InteractiveServer
@inject IDbContextFactory<ApplicationDbContext> DbFactory;

<PageTitle>Not Resolved Tickets</PageTitle>

<h1>Not Resolved Tickets</h1>

<form @onsubmit=Submit>
	<div class="form-style">
		<input type="number" step="1" min="1" title="nid" placeholder="nid" @bind="NID" required/>

        <button type="submit">Submit</button>
	</div>
</form>

<div class="table-container">

    <table class="styled-table">
        <thead>
            <tr>
                <th>Number of Technical Support Tickets</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var num  in NotResTickets)
            {
                <tr>
                    <td>@num</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@if (loading)
{
    <div class="loader"></div>
}

<p>@error</p>

@if ((NotResTickets == null || NotResTickets.Count == 0) && done)
{
    <p>No Tickets available</p>
}

@code {
    private List<int?> NotResTickets = new();
    bool loading;
    bool done;
    string? error;
    public int? NID;

    private async Task Submit()
    {
        try
        {
            loading = true;
            await Task.Yield();
            using var context = DbFactory.CreateDbContext();
            NotResTickets = await context.Database
            .SqlQuery<int?>(
               $"exec Ticket_Account_Customer {NID}"
            ).ToListAsync();
            done = true;
        }
        catch (Exception err)
        {
            error = err.Message;
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }
}