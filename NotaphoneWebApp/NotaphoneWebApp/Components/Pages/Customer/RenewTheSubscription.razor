@page "/RenewTheSubscription"
@rendermode InteractiveServer
@inject IDbContextFactory<ApplicationDbContext> DbFactory;

<PageTitle>Renew Subscription</PageTitle>

<h1>Renew Subscription</h1>

<div class="form-style">
	<form @onsubmit=Submit>
		<input type="text" maxlength="11" pattern="[0-9]{11}" title="11-digit mobile no" placeholder="mobile no" @bind="mobileNo" required/>
		<input type="number" step=".1" min="0" title="plan id" placeholder="amount" @bind="amount" required/>
        <div></div>
        <br />
		<input type="text" maxlength="11" pattern="(cash|credit)" title="payment method (cash or credit)" placeholder="payment method" @bind="paymentMethod" required/>
		<input type="number" step="1" min="1" title="plan id" placeholder="plan id" @bind="planID" required/>
        <div></div>
        <br />

		<button type="submit" style="margin:auto;display:block">Submit</button>
	</form>
</div>

@if (isDone)
{
    <br />
    @if (error) {
		<p>Invalid input</p>
	}
	else
	{
		<p>@rowsAffected row(s) affected</p>
	}
}

@code {
    int? rowsAffected = 0;
    public bool isDone;
    public string mobileNo;
    public decimal? amount;
    public string paymentMethod;
    public int? planID;
    bool error;

    async void Submit()
    {
        rowsAffected = 0;
        error = false;
        try
        {
            isDone = false;
            using var context = DbFactory.CreateDbContext();
            rowsAffected = await context.Database.
            ExecuteSqlAsync(
            $"exec Initiate_plan_payment {mobileNo}, {amount}, {paymentMethod}, {planID}"
            );

            Console.WriteLine("done");
            isDone = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            isDone = true;
            error = true;
        }
        StateHasChanged();
    }
}
