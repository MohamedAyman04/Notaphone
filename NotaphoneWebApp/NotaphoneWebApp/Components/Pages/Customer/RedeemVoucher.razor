@page "/RedeemVoucher"
@rendermode InteractiveServer
@inject IDbContextFactory<ApplicationDbContext> DbFactory;

<PageTitle>Redeem voucher</PageTitle>

<h1>Redeem voucher</h1>

<div class="form-style">
	<form @onsubmit=Submit>
		<input type="text" maxlength="11" pattern="[0-9]{11}" title="11-digit mobile no" placeholder="mobile no" @bind="mobileNo" required/>
		<input type="number" step="1" min="1" title="voucher id" placeholder="voucher id" @bind="voucherID" required/>

		<button type="submit">Submit</button>
	</form>
</div>


@if (isDone)
{
    <p>@rowsAffected row(s) affected</p>
}

@code {
    int? rowsAffected = 0;
    private bool isDone = false;
    public string mobileNo = "";
    public int? voucherID;

    private async Task Submit()
    {
		rowsAffected = 0;
		try
        {
            isDone = false;
            using var context = DbFactory.CreateDbContext();

            rowsAffected = await context.Database
                .ExecuteSqlAsync($"execute Redeem_voucher_points {mobileNo}, {voucherID}");

            Console.WriteLine("done");
            isDone = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            isDone = false;
        }

        StateHasChanged();
    }
}
