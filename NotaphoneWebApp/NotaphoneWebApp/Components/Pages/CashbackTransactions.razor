@page "/CashbackTransactions"
@rendermode InteractiveServer
@inject IDbContextFactory<ApplicationDbContext> DbFactory;

<PageTitle>Cashback Transactions</PageTitle>

<h1>Cashback Transactions</h1>

@if (isLoading)
{
    <p>Loading data...</p>
}
else if (numOfCashbacks == null || numOfCashbacks.Count == 0)
{
    <p>No Transactions Found</p>
}
<table class="table">
    <thead>
        <tr>
            <th>Wallet ID</th>
            <th>Transaction Count</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var cash in numOfCashbacks)
        {
            <tr>
                <td>@cash.WalletId</td>
                <td>@cash.CountOfTransactions</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<NumOfCashback> numOfCashbacks = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using var context = DbFactory.CreateDbContext();
            numOfCashbacks = await context.NumOfCashbacks.ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading customer wallets: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
}
