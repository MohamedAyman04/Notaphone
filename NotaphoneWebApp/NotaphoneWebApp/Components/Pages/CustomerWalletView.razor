@page "/CustomerWalletView"
@rendermode InteractiveServer
@inject IDbContextFactory<ApplicationDbContext> DbFactory;

<PageTitle>Customer Wallet View</PageTitle>

<h1>Customer Wallets</h1>

@if (isLoading)
{
    <p>Loading data...</p>
}
else if (customerWallets == null || customerWallets.Count == 0)
{
    <p>No customer wallets found.</p>
}
<table class="table">
    <thead>
        <tr>
            <th>Wallet ID</th>
            <th>Current Balance</th>
            <th>Currency</th>
            <th>Last Modified Date</th>
            <th>National ID</th>
            <th>Mobile Number</th>
            <th>First Name</th>
            <th>Last Name</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var wallet in customerWallets)
        {
            <tr>
                <td>@wallet.WalletId</td>
                <td>@wallet.CurrentBalance</td>
                <td>@wallet.Currency</td>
                <td>@wallet.LastModifiedDate</td>
                <td>@wallet.NationalId</td>
                <td>@wallet.MobileNo</td>
                <td>@wallet.FirstName</td>
                <td>@wallet.LastName</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<CustomerWallet> customerWallets = new ();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using var context = DbFactory.CreateDbContext();
            customerWallets = await context.CustomerWallets.ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading customer wallets: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
}
