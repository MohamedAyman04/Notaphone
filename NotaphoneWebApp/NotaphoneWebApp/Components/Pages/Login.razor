@page "/"
@rendermode InteractiveServer
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@layout Layout.EmptyLayout

<PageTitle>Login</PageTitle>

<h1>Login</h1>


<form @onsubmit=Submit>
	<div class="login">
		<input type="text" title="11-digit mobile no" maxlength="11" placeholder="mobile no" @bind="mobileNumber" required />
		<input type="password" title="account password" placeholder="password" @bind="password" required />

		<button type="submit">Submit</button>
	</div>
</form>

@if (loading)
{
	<div class="loader"></div>
}

<p>@error</p>

@code {
	public string mobileNumber = "";
	public string password = "";
	public string error = "";
	public bool loading = false;

	async void Submit() {
		loading = true;
		error = "";
		StateHasChanged();

		using var context = DbFactory.CreateDbContext();
		var list = await context.Database
				.SqlQuery<bool?>(
					$"Select dbo.AccountLoginValidation({mobileNumber}, {password})"
				).ToListAsync();

		bool isAdmin = mobileNumber == "admin" && password == "admin";

		var CustomAuthStateProvider = (CustomAuthStateProvider)AuthStateProvider;

		if (!isAdmin) {
			try {
				if (list[0].Value) {
					var user = new UserSession();
					user.MobilePhone = mobileNumber;
					user.Role = "user";
					CustomAuthStateProvider.UpdateAuthenticationState(user);
					NavigationManager.NavigateTo("/HomeCustomer");
				} else {
					throw new Exception("Wrong Mobile Number Or Password");
				}
			}
			catch (Exception err) {
				error = err.Message;
				StateHasChanged();
			}
			finally {
				loading = false;
				StateHasChanged();
			}
		} else {
			var user = new UserSession();
			user.MobilePhone = "admin";
			user.Role = "admin";
			CustomAuthStateProvider.UpdateAuthenticationState(user);
			NavigationManager.NavigateTo("/HomeAdmin");
		} 
	}
}